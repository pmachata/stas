

- wlp* \( ethtool: \( *_packets *_fragments \) /pps *_bytes /B /bps \)

- ethtool: \( swp1 swp2 \) \( a_octets_received_ok rx_octets_prio_* \) /pps

- \( swp1 a_octets_received_ok \) /pps

- Expr ::= [Namespace:] CounterExpr [CounterExpr ...]
- CounterExpr ::= IfnameMatchGrp CounterMatchGrp
- Namespace ::= "ethtool:" | "link:"

- IfnameMatchGrp ::= "(" IfnameMatchGrp ")"
- IfnameMatchGrp ::= glob IfnameMatchGrpOpt
- IfnameMatchGrpOpt ::= IfnameMatchGrp
- IfnameMatchGrpOpt ::= ""

- CounterMatchGrp ::= "(" CounterMatchGrp ")"
- CounterMatchGrp ::= Namespace CounterMatchGrp
- CounterMatchGrp ::= CounterMatchGrp Unit
- CounterMatchGrp ::= glob CounterMatchGrpOpt
- CounterMatchGrpOpt ::= CounterMatchGrp
- CounterMatchGrpOpt ::= ""

- ethtool: \( swp1 swp2 \) \( a_octets_received_ok rx_octets_prio_* \) /pps
- (Expr
    (Namespace "ethtool")
    (IfnameMatchGrp "swp1"
      (IfnameMatchGrpOpt
        (IfnameMatchGrp "swp2"
          (IfnameMatchGrpOpt ""))))
    (CounterMatchGrp
      (CounterMatchGrp "a_octets_received_ok"
        (CounterMatchGrpOpt
          (CounterMatchGrp "rx_octets_prio_*"
            CounterMatchGrpOpt "")))
      (Unit "pps")))

- \( swp1 swp2 \) ethtool: \( a_octets_received_ok rx_octets_prio_* \) /pps
- (Expr
    (IfnameMatchGrp "swp1"
      (IfnameMatchGrpOpt
        (IfnameMatchGrp "swp2"
          (IfnameMatchGrpOpt ""))))
    (CounterMatchGrp
      (Namespace "ethtool")
      (CounterMatchGrp
        (CounterMatchGrp "a_octets_received_ok"
          (CounterMatchGrpOpt
            (CounterMatchGrp "rx_octets_prio_*"
              CounterMatchGrpOpt "")))
        (Unit "pps"))))

- \( swp1 swp2 \) \( ethtool: a_octets_received_ok rx_octets_prio_* \) /pps
- (Expr
    (IfnameMatchGrp "swp1"
      (IfnameMatchGrpOpt
        (IfnameMatchGrp "swp2"
          (IfnameMatchGrpOpt ""))))
    (CounterMatchGrp
      (CounterMatchGrp "a_octets_received_ok"
        (CounterMatchGrpOpt
          (CounterMatchGrp "rx_octets_prio_*"
            CounterMatchGrpOpt "")))
      (Unit "pps"))))

- counters:
  - it looks like we can make do without parentheses
  - ethtool: @if tx_*                   # ethtool counters starting with tx_
  - ethtool: @if1 @if2 tx_*             # the same, on these two interfaces
  - ethtool: @if tx_bytes tx_packets    # these two ethtool counters
  - ethtool: @if1 tx_* @if2 rx_         # ethtool applies to the whole recipe
  - qdisc: @if 1: bytes                 # this qdisc
  - qdisc: @if root bytes               # qdisc whose parent is root
  - qdisc: @if 1:1 bytes                # qdisc whose parent is this class
  - qdisc: @if 1:* bytes                # all qdiscs parented at 1:
  - qdisc: @if 1:1 1:2 1:3 bytes        # qdiscs parented at these classes
  - qdisc: @if 1:1 1:2 bytes drops      # these counters under qdiscs parented at these classes
  - class: @if 1:1 bytes                # mostly the same syntax like qdisc, but this time it select classes
                                        # it looks like fq_codel make difference between App counters for a qdisc
					# and for a class, perhaps it's a more general thing
  - action: @if [a:b|ingress|egress] [protocol x] [pref y] [chain z] [handle h] [action a] counter
    - filters are messy. It looks like we will need to use keywords to annotate
      what's what. Then "bytes" and "packets" (or just a glob, or mentioning
      several would work as well) would terminate the selector.
    - default for handle (a:b) is all
    - default for protocol is all
    - default for chain is 0
    - either pref or handle specify the filter. If neither is given, it's "all"
      - it's called "handle" in tc output, but that word is commonly used to
        refer to qdisc handle. Maybe we want to call this "filter", or support
        both? But no, that would make it harder to copy stuff over from tc.
    - action specifies action order (order of action within the filter). Default
      is * (all actions)
  - action: @if ingress handle 0x123 bytes packets  # protocol all, chain 0, these two counters
  - action: @if ingress pref 1000 *      # prot all, chain 0, pref 1000, all counters
  - action: @if 1: bytes                 # all actions on 1:, bytes
  - action: @if bytes                    # all actions on all qdiscs, bytes
  - action: @if 1: chain * handle 0x123 bytes # this handle on all chains
  - action: @if 1:1 1:2 chain 0 1 2 handle 0x123 0x234 bytes # each keyword can have many arguments
  - action: @if \( chain 1 handle 0x123 \) \( chain 2 handle 0x234 \) bytes
  - occupancy:                           # for devlink occupancy
  - occupancy: @if pool A        	 # current occupancy of pool N
  - occupancy: @if pool A B C    	 # these several pools
  - occupancy: @if pool A value  	 # the same, but requested explicitly
  - occupancy: @if pool A watermark	 # pool occupancy watermark
  - occupancy: @if pool A *	         # both current and watermark
  - occupancy: @DEV/index [...]          # interface can be a devlink port reference
  - occupancy: @if itc A [...]           # ingress TC occupancy
  - occupancy: @if etc A [...]           # egress TC occupancy
  - occupancy: @if pool A B itc C D etc E F value watermark
    - I think it should be allowed to dump all that I care about in one line

- value filters:
  - non0    # Filter out zero counters
    - @if1 \*_octets\* non0
    - actually it looks like this should be on the same layer that deals with
      sorting by value etc. When I say non0, I don't want to see lines that will
      just say 0. I don't care that the counter has non-0 value if nothing is
      happening on it, and I want to show per-second value.
      - but then, I could have a set of counters where non-0 should be applied,
        and set of counter where it should not. So counter matches should carry
        information about what counter filters apply to them.
      - looks like there are two types of filters: list filters, which take a
        list of counters to display, and return a new list of counters to
        display. The "where's my traffic" filter is an example. The other type
        is individual counter filter, which decides whether an already-yielded
        counter should be in the list at all.

- units:
  - /1, /b, /B, /s, /p - units, bits, bytes, seconds, packets
  - /*ps, /d* - per second, delta since the start
  - /K*, /M*, /G*, /m*, /u*, /n*, ... - unit prefixes
  - more than one unit prefix can't be used at once
  - /*ps and /d* are mutually exclusive as well
  - /ps - whatever unit is default for the counter, per second
  - /d - similar for delta
  - conversions:
    - 1:X == 1:1      # Converting to "1" doesn't change the value, only the unit.
    - X:KX == 1:1000  # Unit prefixes work in an obvious manner
    - b:B == 1:8      # Bit/Byte conversions
    - default unit is "1"
  - e.g.:
    - /usps   ::= 1 -> us & show per-second values
    - /B/bps  ::= 1 -> B -> b & show per-second values
    - /dp     ::= 1 -> packets & show delta since the program started
    - /us     ::= 1 -> us & show the value as is

- Expr ::= [Namespace:] CounterExpr [CounterExpr ...]
- CounterExpr ::= IfnameMatch CounterMatchGrp
- Namespace ::= "ethtool:" | "link:"

- IfnameMatch ::= "(" glob* ")"
- IfnameMatch ::= glob
  - xxx make interface notation recognizable? So that the common case of several
    counters can be simply if1 ctr1 ctr2 ctr3 if2 ctr4, i.e. without having to
    enclose the counters into braces.  E.g. "@"glob or some such.
    - then I wouldn't need to bracketize several interfaces. Mentioning them in
      a row would be enough
      - "@if1 @if2 ctr1 ctr2" == "@if1 ctr1 ctr2 @if2 ctr1 ctr2"
      - we still need to support parens for units, so that it's not awkward to
        set units of many counters at once. They will be handy for namespaces
	as well

- CounterMatchGrp     ::= CounterMatchGrpNs CounterMatchGrp
- CounterMatchGrp     ::= ""
- CounterMatchGrpNs   ::= [Namespace] CounterMatchGrpUnit
  - Namespace could be higher up so that it applies to all globs in the
    chain that follow it. Then again, the grouping operators allow
    expressing this, so whatever.
- CounterMatchGrpUnit ::= CounterMatchGrpGlob [Unit]
- CounterMatchGrpGlob ::= "(" CounterMatchGrp ")"
- CounterMatchGrpGlob ::= glob


- ethtool: \( swp1 swp2 \) \( a_octets_received_ok rx_octets_prio_* \) /pps
- (Expr
    (Namespace "ethtool")
    (CounterExpr
      (IfnameMatchGrp "swp1"
        (IfnameMatchGrp "swp2")))
      (CounterMatchGrp
        (CounterMatchGrpNs
          (CounterMatchGrpUnit
            (CounterMatchGrpGlob
              (CounterMatchGrp
                (CounterMatchGrpNs
                  (CounterMatchGrpUnit
                    (CounterMatchGrpGlob "a_octets_received_ok")))
                (CounterMatchGrp
                  (CounterMatchGrpNs
                    (CounterMatchGrpUnit
                      (CounterMatchGrpGlob "rx_octets_prio_*")))
                  (CounterMatchGrp ""))))
            (Unit "pps")))
        (CounterMatchGrp "")))

- \( swp1 swp2 \) ethtool: \( a_octets_received_ok rx_octets_prio_* \) /pps
- (Expr
    (CounterExpr
      (IfnameMatchGrp "swp1"
        (IfnameMatchGrp "swp2")))
      (CounterMatchGrp
        (CounterMatchGrpNs
          (Namespace "ethtool")
          (CounterMatchGrpUnit
            (CounterMatchGrpGlob
              (CounterMatchGrp
                (CounterMatchGrpNs
                  (CounterMatchGrpUnit
                    (CounterMatchGrpGlob "a_octets_received_ok")))
                (CounterMatchGrp
                  (CounterMatchGrpNs
                    (CounterMatchGrpUnit
                      (CounterMatchGrpGlob "rx_octets_prio_*")))
                  (CounterMatchGrp ""))))
            (Unit "pps")))
        (CounterMatchGrp "")))

- \( swp1 swp2 \) \( ethtool: a_octets_received_ok rx_octets_prio_* /pps \)
- (Expr
    (CounterExpr
      (IfnameMatchGrp "swp1"
        (IfnameMatchGrp "swp2")))
      (CounterMatchGrp
        (CounterMatchGrpNs
          (CounterMatchGrpUnit
            (CounterMatchGrp
              (CounterMatchGrpNs
                (Namespace "ethtool")
                (CounterMatchGrpUnit
                  (CounterMatchGrpGlob "a_octets_received_ok")))
              (CounterMatchGrp
                (CounterMatchGrpNs
                  (CounterMatchGrpUnit
                    (CounterMatchGrpGlob "rx_octets_prio_*")
                    (Unit "pps")))
                (CounterMatchGrp "")))))))

- @swp1 @swp2 ethtool: a_octets_received_ok /pps
  - (@swp1 @swp2) (ethtool: (a_octets_received_ok /pps))
- ethtool: @swp1 @swp2 a_octets_received_ok /B /bps rx_packets_prio_* /pps
  - ethtool: ((@swp1 @swp2) ((a_octets_received_ok /B) /bps) (rx_packets_prio_* /pps))
- ethtool: @swp1 @swp2 a_octets_received_ok a_octets_something /B /bps
  - ethtool: ((@swp1 @swp2) (((a_octets_received_ok a_octets_something) /B) /bps))

+---------+----------+--------------------------------------+
|         |          | a_|                                  | <-- filters
+---------+----------+--------------------------------------+
|  swp1   | *ethtool |  a_octets_received : bit  [x] /s     |
| *swp2   |  qdisc   | *a_octets_trans... : bit  [x] /s     |
|  swp3   |  action  | *a_packets_rece... : pkt  [x] /s     |
| *swp4   |  ip link |  etc.              :                 |
| *swp5   |          |  etc.              :                 |
|  swp6   |          |                    :                 |
+---------+----------+--------------------------------------+

- arrows up/down move active cursor within one list
- arrows left/right move activity between lists
- typing and backspace modifies the filter
- space un/marks/toggles active item

- OR: just read json for first iteration?

- top 10 \( ethtool: blah blah \)
  - filters -- take list of counters, filter some of them out
  - sorters -- take list of counters, sort them
    - default - sort by (ifname, ctname)
    - top 10: sort by (counter alue)
